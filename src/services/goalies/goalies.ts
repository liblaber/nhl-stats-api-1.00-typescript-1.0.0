// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { GetGoalieStatsParams } from './request-params';

export class GoaliesService extends BaseService {
  /**
   * Retrieve goalie leaders for a specific attribute.
   * @param {string} attribute - Goalie attribute
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGoalieLeaders(attribute: string, lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/leaders/goalies/{attribute}', { attribute: attribute, lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve goalie stats for a specific report.
   * @param {string} report - Goalie report
   * @param {string} lang - Language code
   * @param {string} cayenneExp - Required
   * @param {boolean} [isAggregate] - Optional
   * @param {boolean} [isGame] - Optional
   * @param {string} [factCayenneExp] - Optional
   * @param {string} [include] - Optional
   * @param {string} [exclude] - Optional
   * @param {string} [sort] - Optional
   * @param {string} [dir] - Optional
   * @param {number} [start] - Optional
   * @param {number} [limit] - Optional (Note: a limit of -1 will return all results)
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGoalieStats(
    report: string,
    lang: string,
    params: GetGoalieStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/goalie/{report}', { report: report, lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.isAggregate) {
      options.queryParams['isAggregate'] = params?.isAggregate;
    }
    if (params?.isGame) {
      options.queryParams['isGame'] = params?.isGame;
    }
    if (params?.factCayenneExp) {
      options.queryParams['factCayenneExp'] = params?.factCayenneExp;
    }
    if (params?.include) {
      options.queryParams['include'] = params?.include;
    }
    if (params?.exclude) {
      options.queryParams['exclude'] = params?.exclude;
    }
    if (params?.cayenneExp) {
      options.queryParams['cayenneExp'] = params?.cayenneExp;
    }
    if (params?.sort) {
      options.queryParams['sort'] = params?.sort;
    }
    if (params?.dir) {
      options.queryParams['dir'] = params?.dir;
    }
    if (params?.start) {
      options.queryParams['start'] = params?.start;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    return this.client.get(path, options);
  }

  /**
   * Retrieve goalie milestones.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGoalieMilestones(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/milestones/goalies', { lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }
}
