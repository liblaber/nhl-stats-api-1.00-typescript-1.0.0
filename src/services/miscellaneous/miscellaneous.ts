// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { GetShiftChartsParams } from './request-params';

export class MiscellaneousService extends BaseService {
  /**
   * Retrieve configuration information.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getConfiguration(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/config', { lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Ping the server to check connectivity.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async pingServer(requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = '/ping';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve country information. Returns list of all countries with a hockey presence(?)
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getCountryInformation(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/country', { lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve shift charts for a specific game.
   * @param {string} lang - Language code
   * @param {string} cayenneExp - Required
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getShiftCharts(
    lang: string,
    params: GetShiftChartsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/shiftcharts', { lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.cayenneExp) {
      options.queryParams['cayenneExp'] = params?.cayenneExp;
    }
    return this.client.get(path, options);
  }

  /**
   * Retrieve the glossary for a specific language.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGlossary(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/glossary', { lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve content module information.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getContentModule(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/{lang}/content/module', { lang: lang });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve metadata for content modules.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getContentModuleMetadata(requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = '/content/module/meta';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }
}
