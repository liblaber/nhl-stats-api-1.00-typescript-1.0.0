// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import { GetShiftChartsParams } from './request-params';

export class MiscellaneousService extends BaseService {
  /**
   * Retrieve configuration information.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getConfiguration(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/{lang}/config',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('lang', lang);
    return this.client.call(request);
  }

  /**
   * Ping the server to check connectivity.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async pingServer(requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/ping',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    return this.client.call(request);
  }

  /**
   * Retrieve country information. Returns list of all countries with a hockey presence(?)
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getCountryInformation(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/{lang}/country',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('lang', lang);
    return this.client.call(request);
  }

  /**
   * Retrieve shift charts for a specific game.
   * @param {string} lang - Language code
   * @param {string} cayenneExp - Required
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getShiftCharts(
    lang: string,
    params: GetShiftChartsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/{lang}/shiftcharts',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('lang', lang);
    request.addQueryParam('cayenneExp', params?.cayenneExp);
    return this.client.call(request);
  }

  /**
   * Retrieve the glossary for a specific language.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGlossary(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/{lang}/glossary',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('lang', lang);
    return this.client.call(request);
  }

  /**
   * Retrieve content module information.
   * @param {string} lang - Language code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getContentModule(lang: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/{lang}/content/module',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('lang', lang);
    return this.client.call(request);
  }

  /**
   * Retrieve metadata for content modules.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getContentModuleMetadata(requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/content/module/meta',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    return this.client.call(request);
  }
}
